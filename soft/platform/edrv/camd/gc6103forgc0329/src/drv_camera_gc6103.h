/* Copyright (C) 2016 RDA Technologies Limited and/or its affiliates("RDA").
* All rights reserved.
*
* This software is supplied "AS IS" without any warranties.
* RDA assumes no responsibility or liability for the use of the software,
* conveys no license or title under any patent, copyright, or mask work
* right to the product. RDA reserves the right to make changes in the
* software without notification.  RDA also make no representation or
* warranty that such application will be suitable for the specified use
* without further testing or modification.
*/


#ifndef _DRV_CAMERA_GC6103_H_
#define _DRV_CAMERA_GC6103_H_

#include "hal_i2c.h"
#include "hal_camera.h"
#include "camera_m.h"

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

#define I2C_ADDR_6103   0x21
#define I2C_ADDR_ISP     0x31

#define CHIP_ID_6103     0xb0

typedef VOID (*CAM_IRQ_HDL_T)(UINT8 id, UINT8 ActiveBufNum);

typedef struct
{
    UINT8 addr;            // Register Address
    UINT8 data;             // Register Data
    UINT8 wait;            // Time to wait after write
} CAM_REG_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_PREVIEW_STAGE_1,
    CAM_MODE_PREVIEW_STAGE_2,
    CAM_MODE_CAPTURE_STAGE_1,
    CAM_MODE_CAPTURE_STAGE_2,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_E;

typedef struct
{
    CAM_MODE_E camMode;
    UINT16* pvidBuf;
    UINT32 nPixels;
} CAM_RUNTIME_T;

// use this for 320x240 (VGA) capture
PRIVATE const CAM_REG_T RG_ISP_INIT[] =
{
    {0xfe,0x80,1},
    {0xfe,0x80,1},
    {0xfc,0x16,1},
    {0xfc,0x16,1},
    {0xfc,0x16,1},
    {0xfc,0x16,1},
    {0xfe,0x00,1},
    {0xf0,0x07,1},
    {0xf1,0x01,1},

    {0x73,0x90,1},
    {0x74,0x80,1},
    {0x75,0x80,1},
    {0x76,0x94,1},

    {0x42,0x00,1},
    {0x77,0x57,1},
    {0x78,0x4d,1},
    {0x79,0x45,1},
    //{0x42,0xfc,1},

    ////////////////////analog////////////////////
    {0x0a,0x02,1},
    {0x0c,0x02,1},
    {0x17,0x10,1},//0x16
    {0x19,0x05,1},
    {0x1b,0x24,1},
    {0x1c,0x04,1},
    {0x1e,0x08,1},
    {0x1f,0xc0,1},
    {0x20,0x00,1},
    {0x21,0x48,1},
    {0x22,0xba,1},
    {0x23,0x22,1},
    {0x24,0x16,1},

    ////////////////////blk////////////////////
    {0x26,0xf7,1},
    {0x29,0x80,1},
    {0x32,0x04,1},
    {0x33,0x20,1},
    {0x34,0x20,1},
    {0x35,0x20,1},
    {0x36,0x20,1},

    ////////////////////ISP BLOCK ENABL////////////////////
    {0x40,0xff,1},
    {0x41,0x44,1},
    {0x42,0x7e,1},
    {0x44,0xa2,1},
    {0x46,0x03,1},
    {0x4b,0xca,1},
    {0x4d,0x01,1},
    {0x4f,0x01,1},
    {0x70,0x48,1},

    //{0xb0,0x00,1},
    //{0xbc,0x00,1},
    //{0xbd,0x00,1},
    //{0xbe,0x00,1},
    ////////////////////DNDD////////////////////
    {0x80,0xe7,1},
    {0x82,0x55,1},
    {0x87,0x4a,1},

    ////////////////////INTPEE////////////////////
    {0x95,0x45,1},

    ////////////////////ASDE////////////////////
    //{0xfe,0x01,1},
    //{0x18,0x22,1},
    //{0xfe,0x00,1},
    //{0x9c,0x0a,1},
    //{0xa0,0xaf,1},
    //{0xa2,0xff,1},
    //{0xa4,0x50,1},
    //{0xa5,0x21,1},
    //{0xa7,0x35,1},

    ////////////////////RGB gamma////////////////////
    //RGB gamma m4'
    {0xbf,0x06,1},
    {0xc0,0x14,1},
    {0xc1,0x27,1},
    {0xc2,0x3b,1},
    {0xc3,0x4f,1},
    {0xc4,0x62,1},
    {0xc5,0x72,1},
    {0xc6,0x8d,1},
    {0xc7,0xa4,1},
    {0xc8,0xb8,1},
    {0xc9,0xc9,1},
    {0xcA,0xd6,1},
    {0xcB,0xe0,1},
    {0xcC,0xe8,1},
    {0xcD,0xf4,1},
    {0xcE,0xFc,1},
    {0xcF,0xFF,1},

    //////////////////CC///////////////////
    {0xfe,0x00,1},

    {0xb3,0x44,1},
    {0xb4,0xfd,1},
    {0xb5,0x02,1},
    {0xb6,0xfa,1},
    {0xb7,0x48,1},
    {0xb8,0xf0,1},

    // crop
    {0x50,0x01,1},

    ////////////////////YCP////////////////////
    {0xfe,0x00,1},
    {0xd1,0x38,1},
    {0xd2,0x38,1},
    {0xdd,0x54,1},

    ////////////////////AEC////////////////////
    {0xfe,0x01,1},
    {0x10,0x40,1},
    {0x11,0x21,1},
    {0x12,0x07,1},
    {0x13,0x50,1},
    {0x17,0x88,1},
    {0x21,0xb0,1},
    {0x22,0x48,1},
    {0x3c,0x95,1},
    {0x3d,0x50,1},
    {0x3e,0x48,1},

    ////////////////////AWB////////////////////
    {0xfe,0x01,1},
    {0x06,0x16,1},
    {0x07,0x06,1},
    {0x08,0x98,1},
    {0x09,0xee,1},
    {0x50,0xfc,1},
    {0x51,0x28,1},
    {0x52,0x0b,1},
    {0x53,0x10,1},
    {0x54,0x10,1},
    {0x55,0x10,1},
    {0x56,0x20,1},
    //{0x57,0x40,1},
    {0x58,0x60,1},
    {0x59,0x28,1},
    {0x5a,0x02,1},
    {0x5b,0x63,1},
    {0x5c,0x35,1},
    {0x5d,0x73,1},
    {0x5e,0x11,1},
    {0x5f,0x40,1},
    {0x60,0x40,1},
    {0x61,0xc8,1},
    {0x62,0xa0,1},
    {0x63,0x40,1},
    {0x64,0x50,1},
    {0x65,0x98,1},
    {0x66,0xfa,1},
    {0x67,0x70,1},
    {0x68,0x58,1},
    {0x69,0x85,1},
    {0x6a,0x40,1},
    {0x6b,0x39,1},
    {0x6c,0x18,1},
    {0x6d,0x28,1},
    {0x6e,0x41,1},
    {0x70,0x02,1},
    {0x71,0x00,1},
    {0x72,0x10,1},
    {0x73,0x40,1},

    //{0x74,0x32,1},
    //{0x75,0x40,1},
    //{0x76,0x30,1},
    //{0x77,0x48,1},
    //{0x7a,0x50,1},
    //{0x7b,0x20,1},

    {0x80,0x60,1},
    {0x81,0x50,1},
    {0x82,0x42,1},
    {0x83,0x40,1},
    {0x84,0x40,1},
    {0x85,0x40,1},

    {0x74,0x40,1},
    {0x75,0x58,1},
    {0x76,0x24,1},
    {0x77,0x40,1},
    {0x78,0x20,1},
    {0x79,0x60,1},
    {0x7a,0x58,1},
    {0x7b,0x20,1},
    {0x7c,0x30,1},
    {0x7d,0x35,1},
    {0x7e,0x10,1},
    {0x7f,0x08,1},

    ////////////////////ABS////////////////////
    {0x9c,0x02,1},
    {0x9d,0x20,1},
    //{0x9f,0x40,1},

    ////////////////////CC-AWB////////////////////
    {0xd0,0x00,1},
    {0xd2,0x2c,1},
    {0xd3,0x80,1},

    ////////////////////LSC///////////////////
    {0xfe,0x01,1},
    {0xa0,0x00,1},
    {0xa1,0x3c,1},
    {0xa2,0x50,1},
    {0xa3,0x00,1},
    {0xa8,0x0f,1},
    {0xa9,0x08,1},
    {0xaa,0x00,1},
    {0xab,0x04,1},
    {0xac,0x00,1},
    {0xad,0x07,1},
    {0xae,0x0e,1},
    {0xaf,0x00,1},
    {0xb0,0x00,1},
    {0xb1,0x09,1},
    {0xb2,0x00,1},
    {0xb3,0x00,1},
    {0xb4,0x31,1},
    {0xb5,0x19,1},
    {0xb6,0x24,1},
    {0xba,0x3a,1},
    {0xbb,0x24,1},
    {0xbc,0x2a,1},
    {0xc0,0x17,1},
    {0xc1,0x13,1},
    {0xc2,0x17,1},
    {0xc6,0x21,1},
    {0xc7,0x1c,1},
    {0xc8,0x1c,1},
    {0xb7,0x00,1},
    {0xb8,0x00,1},
    {0xb9,0x00,1},
    {0xbd,0x00,1},
    {0xbe,0x00,1},
    {0xbf,0x00,1},
    {0xc3,0x00,1},
    {0xc4,0x00,1},
    {0xc5,0x00,1},
    {0xc9,0x00,1},
    {0xca,0x00,1},
    {0xcb,0x00,1},
    {0xa4,0x00,1},
    {0xa5,0x00,1},
    {0xa6,0x00,1},
    {0xa7,0x00,1},
    {0xfe,0x00,1},

    ////////////////////asde ///////////////////
    //{0xa0,0xaf,1},
    //{0xa2,0xff,1},

    //{0x44,0xa2,1},

#if 0
    //subsample 1/2
    {0x59,0x33,1},
    {0x5a,0x02,1},
    {0x5b,0x02,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x02,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},
    //crop 240x320
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x64,1},
    {0x55,0x01,1},
    {0x56,0x40,1},
    {0x57,0x00,1},
    {0x58,0xf0,1},
#else
    //crop 240x320
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x00,1},
    {0x55,0x01,1},
    {0x56,0x40,1},
    {0x57,0x00,1},
    {0x58,0xf0,1},
    ////////////////////RECV///////////////////
    {0xfe, 0x00, 1},
    {0xad, 0x00, 1},
    {0xae, 0xf8, 1},
    {0x16, 0x01, 1},
    {0xf0, 0x17, 1},
    {0xf1, 0x1, 1},
    {0xad, 0x01, 1},

#endif







};


// QVGA(240x320) output
PRIVATE const CAM_REG_T RG_ISP_QVGA[] =
{
#if 0
    //no subsample
    {0x59,0x11,1},
    {0x5a,0x03,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},
#endif

    //crop 240x320
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x00,1},
    {0x55,0x01,1},
    {0x56,0x40,1},  //H
    {0x57,0x00,1},
    {0x58,0xf0,1},  //W
};

// QQVGA(120160) output
PRIVATE const CAM_REG_T RG_ISP_QQVGA2[] =
{

    //subsample 1/2
    {0x59,0x22,1},
    {0x5a,0x03,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},

    //crop 120x160
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x00,1},
    {0x55,0x00,1},
    {0x56,0xa0,1},
    {0x57,0x00,1},
    {0x58,0x78,1},

};


// QQVGA2 160(W)x120(H) output
PRIVATE const CAM_REG_T RG_ISP_QQVGA[] =
{

    /*subsample 1/2
    {0x59,0x22,1},
    {0x5a,0x03,1},

    {0x5b,0x00,1},
    {0x5c,0x00,1},

    {0x5d,0x00,1},

    {0x5e,0x00,1},

    {0x5f,0x00,1},
    {0x60,0x00,1},

    {0x61,0x00,1},

    {0x62,0x00,1},*/

    //crop 160x120
    {0x50,0x01,1},
    {0x51,0x00,1},

    {0x52,0x64,1},
    {0x53,0x00,1},

    {0x54,0x28,1},

    {0x55,0x00,1},

    {0x56,0x78,1},
    {0x57,0x00,1},

    {0x58,0xa0,1},
};

// 6103 initialization
PRIVATE const CAM_REG_T RG_6103_INIT[] =
{
    // This setting is for GC6103 output to GC_ISP(GC6113)
    {0xfc, 0x12, 1},
    {0xf9, 0x03, 1},  //output enable
    //{0xf9, 0x00, 1},  //output enable
    {0xfa, 0x00, 1},
    {0x60, 0x07, 1},
    {0x64, 0x01, 1},  // div 3+1


    {0x08, 0x04, 1},  // column start  Updated by Mormo 2011/05/31
    {0x0e, 0x08, 1},
    {0x14, 0x10, 1},
    {0x16, 0x06, 1},
    {0x1f, 0x15, 1},  // pad driver current
    {0xd2, 0x80, 1},  // aec enable

    {0x20, 0xa8, 1},  // gamma , lsc

    {0x50, 0x14, 1},  // global gain
    {0x51, 0x40, 1},  // gain to 1x

    {0x1c, 0x49, 1},
    {0x1d, 0x95, 1},

    /********************************************/
    /******************* BLK ********************/
    /********************************************/
    {0x30, 0xf7, 1},  // blk disable
    {0x39, 0x09, 1},  // exp_rate_darkc
    {0x3a, 0x18, 1},
    {0x3b, 0x20, 1},


    /********************************************/
    /******************* AEC ********************/
    /********************************************/

    {0xd0, 0x02, 1},
    {0xd1, 0x10, 1},

    {0xd2, 0xf2, 1},  // aec on
    {0xd3, 0x50, 1},  // Y target
    {0xdb, 0x92, 1},
    {0xdc, 0xa5, 1},

    {0xed, 0x02, 1},   // min_exp
    {0xef, 0x60, 1},   //aec pre gain limit
};

PRIVATE const CAM_REG_T RG_6103_ADP_FR[] =
{
    // based on 19.5M MCLK
    {0x01, 0xeb, 1},  //hb[7:0]
    {0x02, 0x08, 1},  //vb[7:0]
    {0x0f, 0x07, 1},  //vb[11:8] , hb[11:8]

    {0xe2, 0x00, 1},   //step[11:8]
    {0xe3, 0x2a, 1},   //step[7:0]

    {0xe4, 0x01, 1},   // level 0 10fps
    {0xe5, 0x50, 1},
    {0xe6, 0x01, 1},   // level 1
    {0xe7, 0xa4, 1},
    {0xe8, 0x01, 1},   // level 2
    {0xe9, 0xf8, 1},
    {0xea, 0x02, 1},   // level 3 5fps
    {0xeb, 0xa0, 1},

    {0xec, 0x20, 1},   // exp_level
};

PRIVATE const CAM_REG_T RG_6103_FIX_FR[] =
{
    // based on 19.5M MCLK
#ifdef VIDREC_FAST_RECORDING
    // 12.5 FPS
    {0x01, 0xb5, 1},  //hb[7:0]
    {0x02, 0x10, 1},  //vb[7:0]
    {0x0f, 0x07, 1},  //vb[11:8] , hb[11:8]

    {0xe2, 0x00, 1},   //step[11:8]
    {0xe3, 0x43, 1},   //step[7:0]

    {0xe4, 0x01, 1},   // level 0 12.5fps
    {0xe5, 0x58, 1},
    {0xe6, 0x01, 1},   // level 1
    {0xe7, 0xae, 1},
    {0xe8, 0x02, 1},   // level 2
    {0xe9, 0x04, 1},
    {0xea, 0x03, 1},   // level 3 5fps
    {0xeb, 0x5c, 1},

    {0xec, 0x00, 1},   // exp_level
#else
    // 7 FPS
    {0x01, 0x07, 1},  //hb[7:0]
    {0x02, 0xe7, 1},  //vb[7:0]
    {0x0f, 0x07, 1},  //vb[11:8] , hb[11:8]

    {0xe2, 0x00, 1},   //step[11:8]
    {0xe3, 0x2b, 1},   //step[7:0]

    {0xe4, 0x01, 1},   // level 0 10fps
    {0xe5, 0x58, 1},
    {0xe6, 0x01, 1},   // level 1
    {0xe7, 0x58, 1},
    {0xe8, 0x01, 1},   // level 2
    {0xe9, 0x58, 1},
    {0xea, 0x01, 1},   // level 3 5fps
    {0xeb, 0x58, 1},

    {0xec, 0x00, 1},   // exp_level
#endif
};

PRIVATE VOID camerap_InteruptHandler(HAL_CAMERA_IRQ_CAUSE_T cause);

#endif //_DRV_CAMERA_GC6103_H_
