/* Copyright (C) 2016 RDA Technologies Limited and/or its affiliates("RDA").
* All rights reserved.
*
* This software is supplied "AS IS" without any warranties.
* RDA assumes no responsibility or liability for the use of the software,
* conveys no license or title under any patent, copyright, or mask work
* right to the product. RDA reserves the right to make changes in the
* software without notification.  RDA also make no representation or
* warranty that such application will be suitable for the specified use
* without further testing or modification.
*/



#include "hal_i2c.h"
#include "hal_camera.h"
#include "camera_m.h"

typedef struct
{
    UINT8 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT8 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

#define NORMAL_Y0ffset  0x08
#define LOWLIGHT_Y0ffset  0x25

//AE target
#define  Pre_Value_P0_0xf7  0x80
#define  Pre_Value_P0_0xf8  0x78
#define  Pre_Value_P0_0xf9  0x70
#define  Pre_Value_P0_0xfa  0x68
//HEQ
#define  Pre_Value_P0_0xdd  0x88
#define  Pre_Value_P0_0xde  0xa0
//AWB pre gain
#define  Pre_Value_P1_0x28  0xac
#define  Pre_Value_P1_0x29  0x94
// use this for 320x240 (VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQvga[] =
{
    //26MHz 20~8fps capture priview
    {0xfd, 0x00, 1},
    {0x1C, 0x00, 1},
    {0x32, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x28, 0xac, 1},
    {0x29, 0x94, 1},
    {0xfd, 0x00, 1},
    {0xe7, 0x03, 1},
    {0xe7, 0x00, 1},
    {0x0f, 0x3f, 1},
    {0x10, 0x3a, 1},
    {0x13, 0x3f, 1},
    {0x15, 0x30, 1},
    {0x44, 0x0e, 1},
    {0x22, 0x10, 1},
    {0x26, 0x02, 1},
    {0x27, 0x68, 1},
    {0x28, 0x12, 1},
    {0x30, 0x00, 1},
    {0x31, 0x10, 1},
    {0x34, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x00, 0x01, 1},
    {0xfd, 0x01, 1},
    {0xc6, 0x06, 1},
    {0xfd, 0x00, 1},
    {0xcd, 0x24, 1},
    {0xd1, 0x03, 1},
    {0xd5, 0xff, 1},
    {0xfc, 0x03, 1},
    {0xfb, 0x0f, 1},
    {0xfd, 0x00, 1},
    {0x65, 0x00, 1},
    {0x66, 0x00, 1},
    {0x67, 0x00, 1},
    {0x68, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x03, 0x7d, 1},
    {0x04, 0x88, 1},
    {0x05, 0x07, 1},
    {0x11, 0x11, 1},
    {0x12, 0x11, 1},
    {0x18, 0x37, 1},
    {0x1a, 0x9e, 1},
    {0x1b, 0x9e, 1},
    {0x2a, 0xE0, 1},
    {0x2b, 0x10, 1},
    {0x2c, 0x9f, 1},
    {0x6f, 0x05, 1},
    {0x8b, 0x2f, 1},
    {0xfd, 0x00, 1},
    {0x4f, 0x54, 1},
    {0x50, 0x22, 1},
    {0x57, 0x06, 1},
    {0x58, 0x0a, 1},
    {0x56, 0x10, 1},
    {0x59, 0x10, 1},
    {0x5a, 0x77, 1},
    {0x5b, 0x22, 1},
    {0xfd, 0x01, 1},
    {0xe8, 0x20, 1},
    {0xec, 0x20, 1},
    {0xe9, 0x60, 1},
    {0xed, 0x40, 1},
    {0xea, 0x20, 1},
    {0xef, 0x20, 1},
    {0xeb, 0x20, 1},
    {0xf0, 0x20, 1},
    {0xfd, 0x00, 1},
    {0xe0, 0x32, 1},
    {0xe1, 0x26, 1},
    {0xe2, 0x22, 1},
    {0xe3, 0x1e, 1},
    {0xe4, 0x1e, 1},
    {0xe5, 0x1d, 1},
    {0xe6, 0x1d, 1},
    {0xe8, 0x1b, 1},
    {0xe9, 0x1b, 1},
    {0xea, 0x1b, 1},
    {0xeb, 0x1a, 1},
    {0xf5, 0x1a, 1},
    {0xf6, 0x1a, 1},
    {0xfd, 0x01, 1},
    {0x94, 0xa8, 1},
    {0x95, 0x1a, 1},
    {0x9c, 0xa8, 1},
    {0x9d, 0x1a, 1},
    {0xfd, 0x00, 1},
    {0x05, 0x00, 1},
    {0x06, 0x00, 1},
    {0x07, 0x00, 1},
    {0x08, 0x00, 1},
    {0x09, 0x01, 1},
    {0x0A, 0xdd, 1},
    {0xf0, 0x62, 1},
    {0xf1, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x90, 0x98, 1},
    {0x91, 0x04, 1},
    {0x92, 0x62, 1},
    {0x93, 0x00, 1},
    {0x98, 0x62, 1},
    {0x99, 0x00, 1},
    {0x9a, 0x01, 1},
    {0x9b, 0x00, 1},
    {0xfd, 0x01, 1},
    {0xc4, 0x70, 1},
    {0xc5, 0x74, 1},
    {0xca, 0x30, 1},
    {0xcb, 0x45, 1},
    {0xcc, 0xa8, 1},
    {0xcd, 0xa8, 1},
    {0xce, 0x98, 1},
    {0xcf, 0x04, 1},
    {0xd0, 0x98, 1},
    {0xd1, 0x04, 1},
    {0xfd, 0x00, 1},
    {0xed, 0x80, 1},
    {0xf7, 0x7c, 1},
    {0xf8, 0x74, 1},
    {0xec, 0x70, 1},
    {0xef, 0x74, 1},
    {0xf9, 0x70, 1},
    {0xfa, 0x68, 1},
    {0xee, 0x64, 1},
    {0xfd, 0x00, 1},
    {0x8b, 0x0 , 1},
    {0x8c, 0x9 , 1},
    {0x8d, 0x11, 1},
    {0x8e, 0x20, 1},
    {0x8f, 0x40, 1},
    {0x90, 0x59, 1},
    {0x91, 0x72, 1},
    {0x92, 0x85, 1},
    {0x93, 0x98, 1},
    {0x94, 0xa9, 1},
    {0x95, 0xba, 1},
    {0x96, 0xc8, 1},
    {0x97, 0xd5, 1},
    {0x98, 0xe1, 1},
    {0x99, 0xec, 1},
    {0x9a, 0xf4, 1},
    {0x9b, 0xfa, 1},
    {0xfd, 0x01, 1},
    {0x8d, 0xfe, 1},
    {0x8e, 0xff, 1},
    {0xfd, 0x00, 1},
    {0xa0, 0x10, 1},
    {0xa1, 0x10, 1},
    {0xa2, 0x14, 1},
    {0xa3, 0x10, 1},
    {0xa4, 0x14, 1},
    {0xa5, 0x80, 1},
    {0xa6, 0x80, 1},
    {0xfd, 0x00, 1},
    {0xb0, 0x00, 1},
    {0xb1, 0x33, 1},
    {0xfd, 0x00, 1},
    {0xb2, 0x10, 1},
    {0xb3, 0x1f, 1},
    {0xb4, 0x10, 1},
    {0xb5, 0x45, 1},
    {0xfd, 0x00, 1},
    {0xbf, 0x01, 1},
    {0xc0, 0xff, 1},
    {0xc1, 0xff, 1},
    {0xfd, 0x00, 1},
    {0xd8, 0x40, 1},
    {0xd9, 0x40, 1},
    {0xda, 0x40, 1},
    {0xdb, 0x40, 1},
    {0xfd, 0x00, 1},
    {0xdc, 0x00, 1},
    {0xdd, 0x80, 1},//
    {0xde, 0x80, 1},//
    {0xdf, 0x80, 1},//
    {0xfd, 0x01, 1},
    {0xa0, 0xca, 1},
    {0xa1, 0xb0, 1},
    {0xa2, 0x6, 1},
    {0xa3, 0xd7, 1},
    {0xa4, 0xc7, 1},
    {0xa5, 0xe2, 1},
    {0xa6, 0xff, 1},
    {0xa7, 0x96, 1},
    {0xa8, 0xeb, 1},
    {0xa9, 0x0c, 1},
    {0xaa, 0x33, 1},
    {0xab, 0x0f, 1},
    {0xfd, 0x00, 1},
    {0x33, 0xcf, 1},
    {0xfd, 0x01, 1},
    {0x8b, 0x2f, 1},
    {0x01, 0xf0, 1},
    {0x02, 0x04, 1},
    {0x03, 0x7e, 1},
    {0x04, 0x88, 1},
    {0x05, 0x07, 1},
    {0xfd, 0x01, 1},
    {0x0e, 0x00, 1},
    {0xfd, 0x00, 1},
    {0x35, 0x40, 1},
    {0x5f, 0x01, 1},
    {0xfd, 0x00, 1},
    {0x32, 0x0d, 1},
    {0x34, 0x06, 1},

    //window 320x240
    {0x4b, 0x00, 1},
    {0x4c, 0xa0, 1},
    {0x47, 0x00, 1},
    {0x48, 0x78, 1},
    {0x4d, 0x01, 1},
    {0x4e, 0x40, 1},
    {0x49, 0x00, 1},
    {0x4a, 0xf0, 1},

};

// use this for 640x480 (VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnVga[] =
{
    //26MHz 20~8fps capture priview
    {0xfd, 0x00, 1},
    {0x1C, 0x00, 1},
    {0x1b, 0x2f, 1},
    {0x32, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x28, 0xac, 1},//ac
    {0x29, 0x94, 1},//94
    {0xfd, 0x00, 1},
    {0xe7, 0x03, 1},
    {0xe7, 0x00, 1},
    {0x0f, 0x3f, 1},
    {0x10, 0x3a, 1},
    {0x13, 0x04, 1},
    {0x15, 0x10, 1},
    {0x16, 0x00, 1},
    {0x1a, 0x09, 1},
    {0x44, 0x0f, 1},
    {0x22, 0x13, 1},
    {0x26, 0x02, 1},
    {0x27, 0x68, 1},
    {0x28, 0x12, 1},
    {0x30, 0x00, 1},
    {0x31, 0x10, 1},
    {0x34, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x00, 0x01, 1},

    {0xfd, 0x01, 1},
    {0xc6, 0x0a, 1},
    {0xc7, 0x0a, 1},
    {0xc8, 0x0a, 1},
    {0xc9, 0x0a, 1},

    {0xfd, 0x00, 1},
    {0xcd, 0x24, 1},
    {0xd1, 0x03, 1},
    {0xd5, 0xff, 1},
    {0xfc, 0x03, 1},
    {0xfb, 0x0f, 1},
    {0xfd, 0x00, 1},
    {0x65, 0x00, 1},
    {0x66, 0x00, 1},
    {0x67, 0x00, 1},
    {0x68, 0x00, 1},

    {0xfd, 0x01, 1},//awb
    {0x11, 0x0d, 1},
    {0x12, 0x0d, 1},
    {0x18, 0x37, 1},
    {0x1a, 0x9e, 1},
    {0x1b, 0x9e, 1},
    {0x2a, 0xE0, 1},
    {0x2b, 0x10, 1},
    {0x2c, 0x9f, 1},

    {0x2d, 0x09, 1},
    {0x2e, 0x09, 1},

    {0x20, 0xd0, 1},
    {0x21, 0x78, 1},
    {0x22, 0xe0, 1},
    {0x23, 0x80, 1},
    {0x16, 0x0d, 1},

    {0x6f, 0x05, 1},
    {0x8b, 0x2f, 1},
    {0xfd, 0x00, 1},
    {0x4f, 0x43, 1},//54
    {0x50, 0x22, 1},
    {0x57, 0x06, 1},
    {0x58, 0x0C, 1},//0A
    {0x56, 0x10, 1},
    {0x59, 0x10, 1},
    {0x5a, 0x77, 1},
    {0x5b, 0x22, 1},

    {0xfd, 0x01, 1},
    {0xe5, 0x20, 1},
    {0xe6, 0x10, 1},
    {0xe7, 0x20, 1},

    {0xe8, 0x40, 1},
    {0xec, 0x40, 1},
    {0xe9, 0x40, 1},
    {0xed, 0x40, 1},
    {0xea, 0x40, 1},
    {0xef, 0x40, 1},
    {0xeb, 0x10, 1},
    {0xf0, 0x20, 1},

    {0xfd, 0x00, 1},
    {0xe0, 0x32, 1},
    {0xe1, 0x26, 1},
    {0xe2, 0x22, 1},
    {0xe3, 0x1e, 1},
    {0xe4, 0x1e, 1},
    {0xe5, 0x1d, 1},
    {0xe6, 0x1d, 1},
    {0xe8, 0x1b, 1},
    {0xe9, 0x1b, 1},
    {0xea, 0x1b, 1},
    {0xeb, 0x1a, 1},
    {0xf5, 0x1a, 1},
    {0xf6, 0x1a, 1},

    {0xfd, 0x01, 1},
    {0x94, 0xa8, 1},
    {0x95, 0x1a, 1},
    {0x9c, 0xa8, 1},
    {0x9d, 0x1a, 1},
    {0xfd, 0x00, 1},
    {0x05, 0x00, 1},
    {0x06, 0x00, 1},
    {0x07, 0x00, 1},
    {0x08, 0x00, 1},
    {0x09, 0x01, 1},
    {0x0A, 0xdd, 1},
    {0xf0, 0x62, 1},
    {0xf1, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x90, 0x98, 1},
    {0x91, 0x04, 1},
    {0x92, 0x62, 1},
    {0x93, 0x00, 1},
    {0x98, 0x62, 1},
    {0x99, 0x00, 1},
    {0x9a, 0x01, 1},
    {0x9b, 0x00, 1},
    {0xfd, 0x01, 1},
    {0xc4, 0x70, 1},
    {0xc5, 0x74, 1},
    {0xca, 0x30, 1},
    {0xcb, 0x45, 1},
    {0xcc, 0xa8, 1},
    {0xcd, 0xa8, 1},
    {0xce, 0x98, 1},
    {0xcf, 0x04, 1},
    {0xd0, 0x98, 1},
    {0xd1, 0x04, 1},
    {0xfd, 0x00, 1},

    {0xed, 0x8c, 1},
    {0xf7, 0x88, 1},
    {0xf8, 0x80, 1},
    {0xec, 0x7c, 1},

    {0xef, 0x74, 1},
    {0xf9, 0x70, 1},
    {0xfa, 0x68, 1},
    {0xee, 0x64, 1},

    {0xfd, 0x00, 1},//1104
    {0x8b, 0x0 , 1},
    {0x8c, 0x9 , 1},
    {0x8d, 0x11, 1},
    {0x8e, 0x20, 1},
    {0x8f, 0x40, 1},
    {0x90, 0x59, 1},
    {0x91, 0x72, 1},
    {0x92, 0x85, 1},
    {0x93, 0x98, 1},
    {0x94, 0xa9, 1},
    {0x95, 0xba, 1},
    {0x96, 0xc8, 1},
    {0x97, 0xd5, 1},
    {0x98, 0xe1, 1},
    {0x99, 0xec, 1},
    {0x9a, 0xf4, 1},
    {0x9b, 0xfa, 1},
    {0xfd, 0x01, 1},
    {0x8d, 0xfe, 1},
    {0x8e, 0xff, 1},

    {0xfd, 0x00, 1},//lsc
    {0xa0, 0x10, 1},
    {0xa1, 0x10, 1},
    {0xa2, 0x14, 1},
    {0xa3, 0x10, 1},
    {0xa4, 0x14, 1},
    {0xa5, 0x80, 1},
    {0xa6, 0x80, 1},

    {0xfd, 0x00, 1},
    {0xb0, 0x00, 1},
    {0xb1, 0x33, 1},

    {0xfd, 0x01, 1},
    {0xd2, 0x00, 1},

    {0xfd, 0x00, 1},
    {0xb2, 0x08, 1},
    {0xb3, 0x1f, 1},
    {0xb4, 0x10, 1},
    {0xb5, 0x45, 1},

    {0xfd, 0x00, 1},
    {0xbf, 0x01, 1},
    {0xc0, 0xff, 1},
    {0xc1, 0xff, 1},

    {0xfd, 0x00, 1},
    {0xd8, 0x88, 1},
    {0xd9, 0x88, 1},
    {0xda, 0x88, 1},
    {0xdb, 0x88, 1},

    {0xfd, 0x00, 1},
    {0xdc, 0x00, 1},
    {0xdd, 0x80, 1},//80
    {0xde, 0x90, 1},//80
    {0xdf, 0x70, 1},//

    {0xfd, 0x01, 1},//ccm
    {0xa0, 0x80, 1},
    {0xa1, 0x00, 1},
    {0xa2, 0x00, 1},
    {0xa3, 0xf3, 1},
    {0xa4, 0x8e, 1},
    {0xa5, 0x00, 1},
    {0xa6, 0x00, 1},
    {0xa7, 0xe6, 1},
    {0xa8, 0x9a, 1},
    {0xa9, 0x00, 1},
    {0xaa, 0x03, 1},
    {0xab, 0x0c, 1},

    {0xfd, 0x00, 1},
    {0x33, 0xcf, 1},

    {0xfd, 0x01, 1},
    {0x8b, 0x2f, 1},
    {0x01, 0xf0, 1},
    {0x02, 0x04, 1},
    {0x03, 0x70, 1},
    {0x04, 0x88, 1},
    {0x05, 0x13, 1},

    {0xfd, 0x01, 1},
    {0x0e, 0x00, 1},

    {0xfd, 0x00, 1},
    {0x35, 0x40, 1},
    {0x5f, 0x01, 1},
    {0xf4, 0x09, 1},

#if 0//26M 28~8fps
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x0 , 1},
    {0x0a , 0x62, 1},
    {0xf0 , 0x89, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0x6c, 1},
    {0x91 , 0x6 , 1},
    {0x92 , 0x89, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x89, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0x6c, 1},
    {0xcf , 0x6 , 1},
    {0xd0 , 0x6c, 1},
    {0xd1 , 0x6 , 1},

#endif

#if 0//26M 26~8fps
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x0 , 1},
    {0x0a , 0xaa, 1},
    {0xf0 , 0x7f, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0xf4, 1},
    {0x91 , 0x5 , 1},
    {0x92 , 0x7f, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x7f, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0xf4, 1},
    {0xcf , 0x5 , 1},
    {0xd0 , 0xf4, 1},
    {0xd1 , 0x5 , 1},

#endif

#if 0//26M 24~8fps
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x0 , 1},
    {0x0a , 0xff, 1},
    {0xf0 , 0x76, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0x88, 1},
    {0x91 , 0x5 , 1},
    {0x92 , 0x76, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x76, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0x88, 1},
    {0xcf , 0x5 , 1},
    {0xd0 , 0x88, 1},
    {0xd1 , 0x5 , 1},

#endif

#if 0//26M 22~8fps
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x1 , 1},
    {0x0a , 0x64, 1},
    {0xf0 , 0x6c, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0x10, 1},
    {0x91 , 0x5 , 1},
    {0x92 , 0x6c, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x6c, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0x10, 1},
    {0xcf , 0x5 , 1},
    {0xd0 , 0x10, 1},
    {0xd1 , 0x5 , 1},

#endif


#if 0 //26M 20~8fps
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0, 1},
    {0x09 , 0x1 , 1},
    {0x0a , 0xdd, 1},
    {0xf0 , 0x62, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0x98, 1},
    {0x91 , 0x4 , 1},
    {0x92 , 0x62, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x62, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0x98, 1},
    {0xcf , 0x4 , 1},
    {0xd0 , 0x98, 1},
    {0xd1 , 0x4 , 1},
#endif

#if 1//26M 16~8fps                        
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa0, 1},
    {0x9c , 0xa0, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},//70->max 14fps
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x3 , 1},
    {0x0a , 0x28, 1},
    {0xf0 , 0x4e, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0xa8, 1},
    {0x91 , 0x3 , 1},
    {0x92 , 0x4e, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x4e, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa0, 1},
    {0xce , 0xa0, 1},
    {0xcf , 0x3 , 1},
    {0xd0 , 0xa8, 1},
    {0xd1 , 0x3 , 1},
#endif

#if 0//26M 12~8fps   
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x5 , 1},
    {0x0a , 0x51, 1},
    {0xf0 , 0x3b, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0xc4, 1},
    {0x91 , 0x2 , 1},
    {0x92 , 0x3b, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x3b, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0xc4, 1},
    {0xcf , 0x2 , 1},
    {0xd0 , 0xc4, 1},
    {0xd1 , 0x2 , 1},
#endif

#if 0//26M 10~8fps 
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x7 , 1},
    {0x0a , 0xb , 1},
    {0xf0 , 0x31, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0x4c, 1},
    {0x91 , 0x2 , 1},
    {0x92 , 0x31, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x31, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0x4c, 1},
    {0xcf , 0x2 , 1},
    {0xd0 , 0x4c, 1},
    {0xd1 , 0x2 , 1},
#endif

#if 0//26M fix8fps 
    //ae gain
    {0xfd , 0x1 , 1},
    {0x94 , 0xa8, 1},
    {0x9c , 0xa8, 1},
    //ae setting
    {0xfd , 0x0 , 1},
    {0x05 , 0x0 , 1},
    {0x06 , 0x0 , 1},
    {0x07 , 0x0 , 1},
    {0x08 , 0x0 , 1},
    {0x09 , 0x9 , 1},
    {0x0a , 0xa2, 1},
    {0xf0 , 0x27, 1},
    {0xf1 , 0x0 , 1},
    {0xfd , 0x1 , 1},
    {0x90 , 0xd4, 1},
    {0x91 , 0x1 , 1},
    {0x92 , 0x27, 1},
    {0x93 , 0x0 , 1},
    {0x98 , 0x27, 1},
    {0x99 , 0x0 , 1},
    {0x9a , 0x1 , 1},
    {0x9b , 0x0 , 1},
    //Status
    {0xfd , 0x1 , 1},
    {0xc4 , 0x70, 1},
    {0xc5 , 0x74, 1},
    {0xca , 0x30, 1},
    {0xcb , 0x45, 1},
    {0xcc , 0xa8, 1},
    {0xcd , 0xa8, 1},
    {0xce , 0xd4, 1},
    {0xcf , 0x1 , 1},
    {0xd0 , 0xd4, 1},
    {0xd1 , 0x1 , 1},
#endif


    {0xfd, 0x00, 1},
    {0x32, 0x0d, 1},
    {0x34, 0x06, 1},

    //window 640x480
    {0x4b, 0x00, 1},
    {0x4c, 0x00, 1},
    {0x47, 0x00, 1},
    {0x48, 0x00, 1},
    {0x4d, 0x02, 1},
    {0x4e, 0x80, 1},
    {0x49, 0x01, 1},
    {0x4a, 0xe0, 1},
};

// use this for 160*120 (QQVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQqvga[] =
{
    //26MHz fix 12fps video priview
    {0xfd, 0x00, 1},
    {0x1C, 0x00, 1},
    {0x32, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x28, 0xac, 1},
    {0x29, 0x94, 1},
    {0xfd, 0x00, 1},
    {0xe7, 0x03, 1},
    {0xe7, 0x00, 1},
    {0x0f, 0x3f, 1},
    {0x10, 0x3a, 1},
    {0x13, 0x3f, 1},
    {0x15, 0x30, 1},
    {0x44, 0x0e, 1},
    {0x22, 0x10, 1},
    {0x26, 0x02, 1},
    {0x27, 0x68, 1},
    {0x28, 0x12, 1},
    {0x30, 0x00, 1},
    {0x31, 0x10, 1},
    {0x34, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x00, 0x01, 1},
    {0xfd, 0x01, 1},
    {0xc6, 0x06, 1},
    {0xfd, 0x00, 1},
    {0xcd, 0x24, 1},
    {0xd1, 0x03, 1},
    {0xd5, 0xff, 1},
    {0xfc, 0x03, 1},
    {0xfb, 0x0f, 1},
    {0xfd, 0x00, 1},
    {0x65, 0x00, 1},
    {0x66, 0x00, 1},
    {0x67, 0x00, 1},
    {0x68, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x03, 0x7d, 1},
    {0x04, 0x88, 1},
    {0x05, 0x07, 1},
    {0x11, 0x11, 1},
    {0x12, 0x11, 1},
    {0x18, 0x37, 1},
    {0x1a, 0x9e, 1},
    {0x1b, 0x9e, 1},
    {0x2a, 0xE0, 1},
    {0x2b, 0x10, 1},
    {0x2c, 0x9f, 1},
    {0x6f, 0x05, 1},
    {0x8b, 0x2f, 1},
    {0xfd, 0x00, 1},
    {0x4f, 0x43, 1},
    {0x50, 0x22, 1},
    {0x57, 0x06, 1},
    {0x58, 0x0c, 1},
    {0x56, 0x10, 1},
    {0x59, 0x10, 1},
    {0x5a, 0x77, 1},
    {0x5b, 0x22, 1},
    {0xfd, 0x01, 1},
    {0xe8, 0x60, 1},
    {0xec, 0x50, 1},
    {0xe9, 0x50, 1},
    {0xed, 0x40, 1},
    {0xea, 0x40, 1},
    {0xef, 0x30, 1},
    {0xeb, 0x30, 1},
    {0xf0, 0x20, 1},
    {0xfd, 0x00, 1},
    {0xe0, 0x32, 1},
    {0xe1, 0x26, 1},
    {0xe2, 0x22, 1},
    {0xe3, 0x1e, 1},
    {0xe4, 0x1e, 1},
    {0xe5, 0x1d, 1},
    {0xe6, 0x1d, 1},
    {0xe8, 0x1b, 1},
    {0xe9, 0x1b, 1},
    {0xea, 0x1b, 1},
    {0xeb, 0x1a, 1},
    {0xf5, 0x1a, 1},
    {0xf6, 0x1a, 1},
    {0xfd, 0x01, 1},
    {0x94, 0xa8, 1},
    {0x95, 0x1a, 1},
    {0x9c, 0xa8, 1},
    {0x9d, 0x1a, 1},
    {0xfd, 0x00, 1},
    {0x05, 0x00, 1},
    {0x06, 0x00, 1},
    {0x07, 0x00, 1},
    {0x08, 0x00, 1},
    {0x09, 0x05, 1},
    {0x0A, 0x51, 1},
    {0xf0, 0x3b, 1},
    {0xf1, 0x00, 1},
    {0xfd, 0x01, 1},
    {0x90, 0xd8, 1},
    {0x91, 0x01, 1},
    {0x92, 0x3b, 1},
    {0x93, 0x00, 1},
    {0x98, 0x3b, 1},
    {0x99, 0x00, 1},
    {0x9a, 0x01, 1},
    {0x9b, 0x00, 1},
    {0xfd, 0x01, 1},
    {0xc4, 0x70, 1},
    {0xc5, 0x74, 1},
    {0xca, 0x30, 1},
    {0xcb, 0x45, 1},
    {0xcc, 0xa8, 1},
    {0xcd, 0xa8, 1},
    {0xce, 0xd8, 1},
    {0xcf, 0x01, 1},
    {0xd0, 0xd8, 1},
    {0xd1, 0x01, 1},
    {0xfd, 0x00, 1},
    {0xed, 0x80, 1},
    {0xf7, 0x7c, 1},
    {0xf8, 0x74, 1},
    {0xec, 0x70, 1},
    {0xef, 0x74, 1},
    {0xf9, 0x70, 1},
    {0xfa, 0x68, 1},
    {0xee, 0x64, 1},
    {0xfd, 0x00, 1},
    {0x8b, 0x0 , 1},
    {0x8c, 0x9 , 1},
    {0x8d, 0x11, 1},
    {0x8e, 0x20, 1},
    {0x8f, 0x40, 1},
    {0x90, 0x59, 1},
    {0x91, 0x72, 1},
    {0x92, 0x85, 1},
    {0x93, 0x98, 1},
    {0x94, 0xa9, 1},
    {0x95, 0xba, 1},
    {0x96, 0xc8, 1},
    {0x97, 0xd5, 1},
    {0x98, 0xe1, 1},
    {0x99, 0xec, 1},
    {0x9a, 0xf4, 1},
    {0x9b, 0xfa, 1},
    {0xfd, 0x01, 1},
    {0x8d, 0xfe, 1},
    {0x8e, 0xff, 1},
    {0xfd, 0x00, 1},
    {0xa0, 0x10, 1},
    {0xa1, 0x10, 1},
    {0xa2, 0x14, 1},
    {0xa3, 0x10, 1},
    {0xa4, 0x14, 1},
    {0xa5, 0x80, 1},
    {0xa6, 0x80, 1},
    {0xfd, 0x00, 1},
    {0xb0, 0x00, 1},
    {0xb1, 0x33, 1},
    {0xfd, 0x00, 1},
    {0xb2, 0x10, 1},
    {0xb3, 0x1f, 1},
    {0xb4, 0x10, 1},
    {0xb5, 0x45, 1},
    {0xfd, 0x00, 1},
    {0xbf, 0x01, 1},
    {0xc0, 0xff, 1},
    {0xc1, 0xff, 1},
    {0xfd, 0x00, 1},
    {0xd8, 0x40, 1},
    {0xd9, 0x40, 1},
    {0xda, 0x40, 1},
    {0xdb, 0x40, 1},
    {0xfd, 0x00, 1},
    {0xdc, 0x00, 1},
    {0xdd, 0x80, 1},
    {0xde, 0x80, 1},
    {0xdf, 0x80, 1},
    {0xfd, 0x01, 1},
    {0xa0, 0xca, 1},
    {0xa1, 0xb0, 1},
    {0xa2, 0x6, 1},
    {0xa3, 0xd7, 1},
    {0xa4, 0xc7, 1},
    {0xa5, 0xe2, 1},
    {0xa6, 0xff, 1},
    {0xa7, 0x96, 1},
    {0xa8, 0xeb, 1},
    {0xa9, 0x0c, 1},
    {0xaa, 0x33, 1},
    {0xab, 0x0f, 1},
    {0xfd, 0x00, 1},
    {0x33, 0xcf, 1},
    {0xfd, 0x01, 1},
    {0x8b, 0x2f, 1},
    {0x01, 0xf0, 1},
    {0x02, 0x04, 1},
    {0x03, 0x7e, 1},
    {0x04, 0x88, 1},
    {0x05, 0x07, 1},
    {0xfd, 0x01, 1},
    {0x0e, 0x00, 1},
    {0xfd, 0x00, 1},
    {0x35, 0x40, 1},
    {0x5f, 0x01, 1},
    {0xfd, 0x00, 1},
    {0x32, 0x0d, 1},
    {0x34, 0x06, 1},

    //window 160x120
    {0x4b, 0x00, 1},
    {0x4c, 0xf0, 1},
    {0x47, 0x00, 1},
    {0x48, 0xb4, 1},
    {0x4d, 0x00, 1},
    {0x4e, 0xa0, 1},
    {0x49, 0x00, 1},
    {0x4a, 0x78, 1},
};

PRIVATE const CAM_REG_T RG_VidFormatVga[] =
{
};

PRIVATE const CAM_REG_T RG_VidFormatQvga[] =
{
};

PRIVATE const CAM_REG_T RG_VidFormatQqvga[] =
{
};

typedef struct
{
    // Camera information structure
    char                desc[40];

    UINT8               snrtype;            //sensor type(RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure(SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity (TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    UINT32              npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence(Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence(Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
    //    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

    // This 'callback' mechanism is not necessary because the encapsulation is taken
    // care of by the environment
    //    PSensorSetReg       snrSetRegCall;      //set reg callback
    //    PSensorGetReg       snrGetRegCall;
    //    PSnrIdChk           snrIdChkCall;
    //    PSnrMirrorFlip      snrMirrorFlipCall;
    //    PSnrContrast        snrContrastCall;
    //    PSnrBrightness      snrBrightnessCall;
    //    PSnrMode            snrModeCall;
    //    PSnrGetEt           snrGetEt;
    //    PSnrSetEt           snrSetEt;
    //    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;

PRIVATE volatile CAM_INFO_T gSensorInfo =
{
    "SP0A18",      // char desc[40];

    0,                      // UINT8 snrtype; (rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x21,                   // UINT8 i2caddress; this is the _REAL_ slave address.  0x40 ronlus
    //  The value written in phase 1 of a write cycle will be 0x42
    //  while the value just before the read will be 0x43
    0x21,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels(VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
    //    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address (to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

PRIVATE VOID camerap_WriteOneReg( UINT8 Addr, UINT8 Data);
PRIVATE VOID camerap_Delay(UINT16 Wait_mS);
PRIVATE VOID camerap_WriteReg(CAM_REG_T RegWrite);
PRIVATE UINT8 camerap_ReadReg(UINT8 Addr);
PRIVATE VOID camerap_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
PRIVATE VOID camerap_InteruptHandler(HAL_CAMERA_IRQ_CAUSE_T cause);
PRIVATE UINT8 camerap_GetId(VOID);

