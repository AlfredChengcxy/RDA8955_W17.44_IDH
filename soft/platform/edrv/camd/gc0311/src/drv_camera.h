/* Copyright (C) 2016 RDA Technologies Limited and/or its affiliates("RDA").
* All rights reserved.
*
* This software is supplied "AS IS" without any warranties.
* RDA assumes no responsibility or liability for the use of the software,
* conveys no license or title under any patent, copyright, or mask work
* right to the product. RDA reserves the right to make changes in the
* software without notification.  RDA also make no representation or
* warranty that such application will be suitable for the specified use
* without further testing or modification.
*/


#include "hal_i2c.h"
#include "hal_camera.h"
#include "camera_m.h"

typedef struct
{
    UINT8 Addr;            // Register Address
    UINT8 Data;             // Register Data
    UINT8 Wait;            // Time to wait after write
} CAM_REG_T;

typedef struct
{
    UINT16 Len;             // Size of array
    CAM_REG_T *RegVal;      // Array of registers
} CAM_REG_GROUP_T;

typedef enum
{
    CAM_MODE_IDLE,
    CAM_MODE_VIEWFINDER,
    CAM_MODE_PREP_IMG_CAPTURE,
    CAM_MODE_IMG_CAPTURE,
    CAM_MODE_PREP_VID_CAPTURE,
    CAM_MODE_VID_CAPTURE
} CAM_MODE_T;

// On FPGA platform, Pixel Clock must not be too fast or xfer screws up
#define CAM_CLK_CFG 0x81

// use this for 320x240 (VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQvga[] =
{
    // TODO: add initial code here
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    ///////////////////////////////////////////////
    /////////// system reg ////////////////////////
    ///////////////////////////////////////////////

    {0xf1,0x07,1},
    {0xf2,0x01,1},
    {0xfc,0x16,1},
    ///////////////////////////////////////////////
    /////////// CISCTL     ////////////////////////
    ///////////////////////////////////////////////

    {0xfe,0x00,1},// set page0

#if 0//fix 14.3
    {0x05,0x01,1},
    {0x06,0xfa,1},
    {0x07,0x00,1},
    {0x08,0xd4,1},

    {0x03,0x01,1},
    {0x04,0x90,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x64,1},

    {0x2b,0x02,1},
    {0x2c,0xbc,1},
    {0x2d,0x02,1},
    {0x2e,0xbc,1},
    {0x2f,0x02,1},
    {0x30,0xbc,1},
    {0x31,0x09,1},
    {0x32,0xc4,1},
    {0xfe,0x00,1},

#elif 0 //mclk =13MHZ fps =8.3
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x00,1},
    {0x04,0x9c,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x34,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x02,1},
    {0x2e,0x70,1},
    {0x2f,0x02,1},
    {0x30,0x70,1},
    {0x31,0x04,1},
    {0x32,0x10,1},
    {0xfe,0x00,1},
#else    //mclk =26MHZ fps =16.6--7.2
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x01,1},
    {0x04,0x38,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x68,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x03,1},
    {0x2e,0x40,1},
    {0x2f,0x05,1},
    {0x30,0xb0,1},
    {0x31,0x08,1},
    {0x32,0x20,1},
    {0xfe,0x00,1},

#endif
    //////window setting////
    {0x0d,0x01,1},
    {0x0e,0xe8,1},
    {0x0f,0x02,1},
    {0x10,0x88,1},
    {0x09,0x00,1},
    {0x0a,0x00,1},
    {0x0b,0x00,1},
    {0x0c,0x04,1},
    {0x17,0x14,1},
    {0x18,0x1a,1},
    {0x19,0x04,1},
    {0x1b,0x48,1},
    {0x1f,0x08,1},
    {0x20,0x01,1},
    {0x22,0x9a,1},
    {0x23,0x07,1},
    {0x24,0x16,1},
    //global gain for range
    {0x70,0x5b,1},
    {0x73,0x80,1},
    {0x76,0x80,1},
    /////////////////////////////////////////////////////////////////////
    /////////////////////////// BLK////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    {0x26,0xf7,1},
    {0x28,0x7f,1},
    {0x29,0x40,1},
    {0x33,0x1a,1},
    {0x34,0x1a,1},
    {0x35,0x1a,1},
    {0x36,0x1a,1},
    //////////////////////////////////
    ////////////   block enable      ///
    //////////////////////////////////
    {0x40,0xdf,1},
    {0x41,0x2e,1},
    {0x42,0xff,1},

    {0x44,0xa2,1},
    {0x46,0x03,1}, //
    {0x4d,0x01,1},
    {0x4f,0x01,1}, //
    {0x7e,0x10,1},
    {0x7f,0xc3,1},

    //DN & EEINTP
    {0x80,0xe7,1},
    {0x82,0x30,1},
    {0x84,0x02,1},
    {0x89,0x22,1},
    {0x90,0xbc,1},
    {0x92,0x08,1},
    {0x94,0x08,1},
    {0x95,0x64,1}, //

    /////////////////////ASDE/////////
    {0x9a,0x20,1},
    {0x9c,0x46,1},

    //////////////////////////////////
    ////////////////Y gamma //////////
    //////////////////////////////////
    {0xfe,0x00,1},
    {0x63,0x00,1},
    {0x64,0x06,1},
    {0x65,0x0c,1},
    {0x66,0x18,1},
    {0x67,0x2A,1},
    {0x68,0x3D,1},
    {0x69,0x50,1},
    {0x6A,0x60,1},
    {0x6B,0x80,1},
    {0x6C,0xA0,1},
    {0x6D,0xC0,1},
    {0x6E,0xE0,1},
    {0x6F,0xFF,1},
    {0xfe,0x00,1},

    /////////////////////////////////
    ///////////////RGB gamma ////////
    /////////////////////////////////
    {0xBF,0x0E,1},
    {0xc0,0x1C,1},
    {0xc1,0x34,1},
    {0xc2,0x48,1},
    {0xc3,0x5A,1},
    {0xc4,0x6B,1},
    {0xc5,0x7B,1},
    {0xc6,0x95,1},
    {0xc7,0xAB,1},
    {0xc8,0xBF,1},
    {0xc9,0xCE,1},
    {0xcA,0xD9,1},
    {0xcB,0xE4,1},
    {0xcC,0xEC,1},
    {0xcD,0xF7,1},
    {0xcE,0xFD,1},
    {0xcF,0xFF,1},

    //////////////////////////////
    /////////////YCP//////////////
    ////////////////////////////
    {0xd1,0x40,1},
    {0xd2,0x40,1},
    {0xdd,0x00,1},
    {0xed,0x00,1},

    {0xde,0x38,1},
    {0xe4,0x88,1},
    {0xe5,0x40,1},

    //luma_div
    {0xfe,0x01,1},
    {0x18,0x22,1},

    //////////////////////////////////
    ///////////MEANSURE WINDOW////////
    /////////////////////////////////
    {0x08,0xa4,1},
    {0x09,0xf0,1},

    //////////////////////////////////
    /////////// AEC   ////////////////
    //////////////////////////////////
    {0xfe,0x01,1},

    {0x10,0x08,1},

    {0x11,0x11,1},
    {0x12,0x14,1},
    {0x13,0x40,1},
    {0x16,0xd8,1},
    {0x17,0x98,1},
    {0x21,0xc0,1},
    {0x22,0x40,1},

    {0x29,0x00,1},
    {0x2a,0x96,1},
    {0x2b,0x02,1},
    {0x2c,0x58,1},
    {0x2d,0x03,1},
    {0x2e,0x84,1},
    {0x2f,0x07,1},
    {0x30,0x08,1},
    {0x31,0x0e,1},
    {0x32,0xa6,1},
    {0x33,0x20,1},

    //////////////////////////////
    //////////////AWB////////////
    ///////////////////////////////
    {0x06,0x10,1},
    {0x08,0xa0,1},

    {0x50,0xfe,1},
    {0x51,0x05,1},
    {0x52,0x28,1},
    {0x53,0x08,1},
    {0x54,0x10,1},
    {0x55,0x20,1},
    {0x56,0x10,1},
    {0x57,0x20,1},
    {0x58,0xf8,1},
    {0x59,0x10,1},
    {0x5a,0x16,1},
    {0x5b,0xf0,1},
    {0x5e,0xe8,1},
    {0x5f,0x20,1},
    {0x60,0x20,1},
    {0x61,0xe0,1},

    {0x62,0x03,1},
    {0x63,0x30,1},
    {0x64,0xc0,1},
    {0x65,0xd0,1},
    {0x66,0x20,1},
    {0x67,0x00,1},

    {0x6d,0x80,1},
    {0x6e,0x08,1},
    {0x6f,0x08,1},
    {0x70,0x10,1},

    {0x72,0x2e,1},
    {0x73,0x62,1},
    {0x74,0x03,1},

    {0x75,0x48,1},
    {0x76,0x40,1},
    {0x77,0xc2,1},
    {0x78,0xa5,1},

    {0x79,0x18,1},
    {0x7a,0x40,1},
    {0x7b,0xb0,1},
    {0x7c,0xf5,1},

    {0x81,0x80,1},
    {0x82,0x60,1},
    {0x83,0x80,1},

    {0x8a,0xf8,1},
    {0x8b,0xf4,1},
    {0x8c,0x0a,1},
    {0x8d,0x00,1},
    {0x8e,0x00,1},
    {0x8f,0x00,1},
    {0x90,0x12,1},

    {0xfe,0x00,1},
    /////////////////////////////////////////
    /////////// SPI reciver//////////////////
    /////////////////////////////////////////
    //{0xad, 0x00,1},

    /////////////////////////////
    /////////////LSC/////////////
    /////////////////////////////
    {0xfe, 0x01,1},
    {0xa0, 0x00,1},
    {0xa1, 0x3c,1},
    {0xa2, 0x50,1},
    {0xa3, 0x00,1},
    {0xa8, 0x09,1},
    {0xa9, 0x04,1},
    {0xaa, 0x00,1},
    {0xab, 0x0c,1},
    {0xac, 0x02,1},
    {0xad, 0x00,1},
    {0xae, 0x15,1},
    {0xaf, 0x05,1},
    {0xb0, 0x00,1},
    {0xb1, 0x0f,1},
    {0xb2, 0x06,1},
    {0xb3, 0x00,1},
    {0xb4, 0x36,1},
    {0xb5, 0x2a,1},
    {0xb6, 0x25,1},
    {0xba, 0x36,1},
    {0xbb, 0x25,1},
    {0xbc, 0x22,1},
    {0xc0, 0x1e,1},
    {0xc1, 0x18,1},
    {0xc2, 0x17,1},
    {0xc6, 0x1c,1},
    {0xc7, 0x18,1},
    {0xc8, 0x17,1},
    {0xb7, 0x00,1},
    {0xb8, 0x00,1},
    {0xb9, 0x00,1},
    {0xbd, 0x00,1},
    {0xbe, 0x00,1},
    {0xbf, 0x00,1},
    {0xc3, 0x00,1},
    {0xc4, 0x00,1},
    {0xc5, 0x00,1},
    {0xc9, 0x00,1},
    {0xca, 0x00,1},
    {0xcb, 0x00,1},
    {0xa4, 0x00,1},
    {0xa5, 0x00,1},
    {0xa6, 0x00,1},
    {0xa7, 0x00,1},

    {0xfe, 0x00,1},
    {0x50, 0x01,1},  //crop
    {0x44, 0xa2,1},
    //{0x24, 0x16,1},

    //*****subsampleratio=4 {0x5a,0x03,1}, start****//
    //*****subsampleratio=4 end****//
    //subsample 1/2
#if 1
    {0x59,0x33,1},
    {0x5a,0x02,1},
    {0x5b,0x02,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x02,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},
#else
    {0x59,0x22,1},
    {0x5a,0x03,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},
#endif
    //crop 240x320
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x64,1},
    {0x55,0x01,1},
    {0x56,0x40,1},
    {0x57,0x00,1},
    {0x58,0xf0,1},
};

// use this for 640x480 {VGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnVga[] =
{
    // TODO: add initial code here
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    ///////////////////////////////////////////////
    /////////// system reg ////////////////////////
    ///////////////////////////////////////////////

    {0xf1,0x07,1},
    {0xf2,0x01,1},
    {0xfc,0x16,1},
    ///////////////////////////////////////////////
    /////////// CISCTL     ////////////////////////
    ///////////////////////////////////////////////

    {0xfe,0x00,1},// set page0

#if 0//fix 14.3
    {0x05,0x01,1},
    {0x06,0xfa,1},
    {0x07,0x00,1},
    {0x08,0xd4,1},

    {0x03,0x01,1},
    {0x04,0x90,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x64,1},

    {0x2b,0x02,1},
    {0x2c,0xbc,1},
    {0x2d,0x02,1},
    {0x2e,0xbc,1},
    {0x2f,0x02,1},
    {0x30,0xbc,1},
    {0x31,0x09,1},
    {0x32,0xc4,1},
    {0xfe,0x00,1},

#elif 0 //mclk =13MHZ fps =8.3
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x00,1},
    {0x04,0x9c,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x34,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x02,1},
    {0x2e,0x70,1},
    {0x2f,0x02,1},
    {0x30,0x70,1},
    {0x31,0x04,1},
    {0x32,0x10,1},
    {0xfe,0x00,1},
#else  //mclk =26MHZ fps =16.6--7.2
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x01,1},
    {0x04,0x38,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x68,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x03,1},
    {0x2e,0x40,1},
    {0x2f,0x05,1},
    {0x30,0xb0,1},
    {0x31,0x08,1},
    {0x32,0x20,1},
    {0xfe,0x00,1},
#endif
    //////window setting////
    {0x0d,0x01,1},
    {0x0e,0xe8,1},
    {0x0f,0x02,1},
    {0x10,0x88,1},
    {0x09,0x00,1},
    {0x0a,0x00,1},
    {0x0b,0x00,1},
    {0x0c,0x04,1},
    {0x17,0x14,1},
    {0x18,0x1a,1},
    {0x19,0x04,1},
    {0x1b,0x48,1},
    {0x1f,0x08,1},
    {0x20,0x01,1},
    {0x22,0x9a,1},
    {0x23,0x07,1},
    {0x24,0x16,1},
    //global gain for range
    {0x70,0x5b,1},
    {0x73,0x80,1},
    {0x76,0x80,1},
    /////////////////////////////////////////////////////////////////////
    /////////////////////////// BLK////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    {0x26,0xf7,1},
    {0x28,0x7f,1},
    {0x29,0x40,1},
    {0x33,0x1a,1},
    {0x34,0x1a,1},
    {0x35,0x1a,1},
    {0x36,0x1a,1},
    //////////////////////////////////
    ////////////   block enable      ///
    //////////////////////////////////
    {0x40,0xdf,1},
    {0x41,0x2e,1},
    {0x42,0xff,1},

    {0x44,0xa2,1},
    {0x46,0x02,1}, //
    {0x4d,0x01,1},
    {0x4f,0x01,1}, //
    {0x7e,0x10,1},
    {0x7f,0xc3,1},

    //DN & EEINTP
    {0x80,0xe7,1},
    {0x82,0x30,1},
    {0x84,0x02,1},
    {0x89,0x22,1},
    {0x90,0xbc,1},
    {0x92,0x08,1},
    {0x94,0x08,1},
    {0x95,0x64,1}, //

    /////////////////////ASDE/////////
    {0x9a,0x20,1},
    {0x9c,0x46,1},

    //////////////////////////////////
    ////////////////Y gamma //////////
    //////////////////////////////////
    {0xfe,0x00,1},
    {0x63,0x00,1},
    {0x64,0x06,1},
    {0x65,0x0c,1},
    {0x66,0x18,1},
    {0x67,0x2A,1},
    {0x68,0x3D,1},
    {0x69,0x50,1},
    {0x6A,0x60,1},
    {0x6B,0x80,1},
    {0x6C,0xA0,1},
    {0x6D,0xC0,1},
    {0x6E,0xE0,1},
    {0x6F,0xFF,1},
    {0xfe,0x00,1},

    /////////////////////////////////
    ///////////////RGB gamma ////////
    /////////////////////////////////
    {0xBF,0x0E,1},
    {0xc0,0x1C,1},
    {0xc1,0x34,1},
    {0xc2,0x48,1},
    {0xc3,0x5A,1},
    {0xc4,0x6B,1},
    {0xc5,0x7B,1},
    {0xc6,0x95,1},
    {0xc7,0xAB,1},
    {0xc8,0xBF,1},
    {0xc9,0xCE,1},
    {0xcA,0xD9,1},
    {0xcB,0xE4,1},
    {0xcC,0xEC,1},
    {0xcD,0xF7,1},
    {0xcE,0xFD,1},
    {0xcF,0xFF,1},

    //////////////////////////////
    /////////////YCP//////////////
    ////////////////////////////
    {0xd1,0x40,1},
    {0xd2,0x40,1},
    {0xdd,0x00,1},
    {0xed,0x00,1},

    {0xde,0x38,1},
    {0xe4,0x88,1},
    {0xe5,0x40,1},

    //luma_div
    {0xfe,0x01,1},
    {0x18,0x22,1},

    //////////////////////////////////
    ///////////MEANSURE WINDOW////////
    /////////////////////////////////
    {0x08,0xa4,1},
    {0x09,0xf0,1},

    //////////////////////////////////
    /////////// AEC   ////////////////
    //////////////////////////////////
    {0xfe,0x01,1},

    {0x10,0x08,1},

    {0x11,0x11,1},
    {0x12,0x14,1},
    {0x13,0x40,1},
    {0x16,0xd8,1},
    {0x17,0x98,1},
    {0x21,0xc0,1},
    {0x22,0x40,1},

    {0x29,0x00,1},
    {0x2a,0x96,1},
    {0x2b,0x02,1},
    {0x2c,0x58,1},
    {0x2d,0x03,1},
    {0x2e,0x84,1},
    {0x2f,0x07,1},
    {0x30,0x08,1},
    {0x31,0x0e,1},
    {0x32,0xa6,1},
    {0x33,0x20,1},

    //////////////////////////////
    //////////////AWB////////////
    ///////////////////////////////
    {0x06,0x10,1},
    {0x08,0xa0,1},

    {0x50,0xfe,1},
    {0x51,0x05,1},
    {0x52,0x28,1},
    {0x53,0x08,1},
    {0x54,0x10,1},
    {0x55,0x20,1},
    {0x56,0x10,1},
    {0x57,0x20,1},
    {0x58,0xf8,1},
    {0x59,0x10,1},
    {0x5a,0x16,1},
    {0x5b,0xf0,1},
    {0x5e,0xe8,1},
    {0x5f,0x20,1},
    {0x60,0x20,1},
    {0x61,0xe0,1},

    {0x62,0x03,1},
    {0x63,0x30,1},
    {0x64,0xc0,1},
    {0x65,0xd0,1},
    {0x66,0x20,1},
    {0x67,0x00,1},

    {0x6d,0x80,1},
    {0x6e,0x08,1},
    {0x6f,0x08,1},
    {0x70,0x10,1},

    {0x72,0x2e,1},
    {0x73,0x62,1},
    {0x74,0x03,1},

    {0x75,0x48,1},
    {0x76,0x40,1},
    {0x77,0xc2,1},
    {0x78,0xa5,1},

    {0x79,0x18,1},
    {0x7a,0x40,1},
    {0x7b,0xb0,1},
    {0x7c,0xf5,1},

    {0x81,0x80,1},
    {0x82,0x60,1},
    {0x83,0x80,1},

    {0x8a,0xf8,1},
    {0x8b,0xf4,1},
    {0x8c,0x0a,1},
    {0x8d,0x00,1},
    {0x8e,0x00,1},
    {0x8f,0x00,1},
    {0x90,0x12,1},

    {0xfe,0x00,1},
    /////////////////////////////////////////
    /////////// SPI reciver//////////////////
    /////////////////////////////////////////
    //{0xad, 0x00,1},

    /////////////////////////////
    /////////////LSC/////////////
    /////////////////////////////
    {0xfe, 0x01,1},
    {0xa0, 0x00,1},
    {0xa1, 0x3c,1},
    {0xa2, 0x50,1},
    {0xa3, 0x00,1},
    {0xa8, 0x09,1},
    {0xa9, 0x04,1},
    {0xaa, 0x00,1},
    {0xab, 0x0c,1},
    {0xac, 0x02,1},
    {0xad, 0x00,1},
    {0xae, 0x15,1},
    {0xaf, 0x05,1},
    {0xb0, 0x00,1},
    {0xb1, 0x0f,1},
    {0xb2, 0x06,1},
    {0xb3, 0x00,1},
    {0xb4, 0x36,1},
    {0xb5, 0x2a,1},
    {0xb6, 0x25,1},
    {0xba, 0x36,1},
    {0xbb, 0x25,1},
    {0xbc, 0x22,1},
    {0xc0, 0x1e,1},
    {0xc1, 0x18,1},
    {0xc2, 0x17,1},
    {0xc6, 0x1c,1},
    {0xc7, 0x18,1},
    {0xc8, 0x17,1},
    {0xb7, 0x00,1},
    {0xb8, 0x00,1},
    {0xb9, 0x00,1},
    {0xbd, 0x00,1},
    {0xbe, 0x00,1},
    {0xbf, 0x00,1},
    {0xc3, 0x00,1},
    {0xc4, 0x00,1},
    {0xc5, 0x00,1},
    {0xc9, 0x00,1},
    {0xca, 0x00,1},
    {0xcb, 0x00,1},
    {0xa4, 0x00,1},
    {0xa5, 0x00,1},
    {0xa6, 0x00,1},
    {0xa7, 0x00,1},

    {0xfe, 0x00,1},
    {0x50, 0x01,1},  //crop
    {0x44, 0xa2,1},
    //{0x24, 0x16,1},

    {0xff,0xff,0},
};

// use this for 160*120 {QQVGA) capture
PRIVATE const CAM_REG_T RG_InitPowerOnQqvga[] =
{
    // TODO: add initial code here
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    {0xfe,0xf0,1},
    ///////////////////////////////////////////////
    /////////// system reg ////////////////////////
    ///////////////////////////////////////////////

    {0xf1,0x07,1},
    {0xf2,0x01,1},
    {0xfc,0x16,1},
    ///////////////////////////////////////////////
    /////////// CISCTL     ////////////////////////
    ///////////////////////////////////////////////

    {0xfe,0x00,1},// set page0

#if 0//fix 14.3
    {0x05,0x01,1},
    {0x06,0xfa,1},
    {0x07,0x00,1},
    {0x08,0xd4,1},

    {0x03,0x01,1},
    {0x04,0x90,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x64,1},

    {0x2b,0x02,1},
    {0x2c,0xbc,1},
    {0x2d,0x02,1},
    {0x2e,0xbc,1},
    {0x2f,0x02,1},
    {0x30,0xbc,1},
    {0x31,0x09,1},
    {0x32,0xc4,1},
    {0xfe,0x00,1},

#elif 0 //mclk =13MHZ fps =8.3
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x00,1},
    {0x04,0x9c,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x34,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x02,1},
    {0x2e,0x70,1},
    {0x2f,0x02,1},
    {0x30,0x70,1},
    {0x31,0x04,1},
    {0x32,0x10,1},
    {0xfe,0x00,1},
#else  //mclk =26MHZ fps =16.6--7.2
    {0x05,0x02,1},
    {0x06,0x2c,1},
    {0x07,0x00,1},
    {0x08,0x88,1},

    {0x03,0x01,1},
    {0x04,0x38,1},
    {0xfe,0x01,1},
    {0x29,0x00,1},
    {0x2a,0x68,1},

    {0x2b,0x02,1},
    {0x2c,0x70,1},
    {0x2d,0x03,1},
    {0x2e,0x40,1},
    {0x2f,0x05,1},
    {0x30,0xb0,1},
    {0x31,0x08,1},
    {0x32,0x20,1},
    {0xfe,0x00,1},
#endif
    //////window setting////
    {0x0d,0x01,1},
    {0x0e,0xe8,1},
    {0x0f,0x02,1},
    {0x10,0x88,1},
    {0x09,0x00,1},
    {0x0a,0x00,1},
    {0x0b,0x00,1},
    {0x0c,0x04,1},
    {0x17,0x14,1},
    {0x18,0x1a,1},
    {0x19,0x04,1},
    {0x1b,0x48,1},
    {0x1f,0x08,1},
    {0x20,0x01,1},
    {0x22,0x9a,1},
    {0x23,0x07,1},
    {0x24,0x16,1},
    //global gain for range
    {0x70,0x5b,1},
    {0x73,0x80,1},
    {0x76,0x80,1},
    /////////////////////////////////////////////////////////////////////
    /////////////////////////// BLK////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    {0x26,0xf7,1},
    {0x28,0x7f,1},
    {0x29,0x40,1},
    {0x33,0x1a,1},
    {0x34,0x1a,1},
    {0x35,0x1a,1},
    {0x36,0x1a,1},
    //////////////////////////////////
    ////////////   block enable      ///
    //////////////////////////////////
    {0x40,0xdf,1},
    {0x41,0x2e,1},
    {0x42,0xff,1},

    {0x44,0xa2,1},
    {0x46,0x03,1}, //
    {0x4d,0x01,1},
    {0x4f,0x01,1}, //
    {0x7e,0x10,1},
    {0x7f,0xc3,1},

    //DN & EEINTP
    {0x80,0xe7,1},
    {0x82,0x30,1},
    {0x84,0x02,1},
    {0x89,0x22,1},
    {0x90,0xbc,1},
    {0x92,0x08,1},
    {0x94,0x08,1},
    {0x95,0x64,1}, //

    /////////////////////ASDE/////////
    {0x9a,0x20,1},
    {0x9c,0x46,1},

    //////////////////////////////////
    ////////////////Y gamma //////////
    //////////////////////////////////
    {0xfe,0x00,1},
    {0x63,0x00,1},
    {0x64,0x06,1},
    {0x65,0x0c,1},
    {0x66,0x18,1},
    {0x67,0x2A,1},
    {0x68,0x3D,1},
    {0x69,0x50,1},
    {0x6A,0x60,1},
    {0x6B,0x80,1},
    {0x6C,0xA0,1},
    {0x6D,0xC0,1},
    {0x6E,0xE0,1},
    {0x6F,0xFF,1},
    {0xfe,0x00,1},

    /////////////////////////////////
    ///////////////RGB gamma ////////
    /////////////////////////////////
    {0xBF,0x0E,1},
    {0xc0,0x1C,1},
    {0xc1,0x34,1},
    {0xc2,0x48,1},
    {0xc3,0x5A,1},
    {0xc4,0x6B,1},
    {0xc5,0x7B,1},
    {0xc6,0x95,1},
    {0xc7,0xAB,1},
    {0xc8,0xBF,1},
    {0xc9,0xCE,1},
    {0xcA,0xD9,1},
    {0xcB,0xE4,1},
    {0xcC,0xEC,1},
    {0xcD,0xF7,1},
    {0xcE,0xFD,1},
    {0xcF,0xFF,1},

    //////////////////////////////
    /////////////YCP//////////////
    ////////////////////////////
    {0xd1,0x40,1},
    {0xd2,0x40,1},
    {0xdd,0x00,1},
    {0xed,0x00,1},

    {0xde,0x38,1},
    {0xe4,0x88,1},
    {0xe5,0x40,1},

    //luma_div
    {0xfe,0x01,1},
    {0x18,0x22,1},

    //////////////////////////////////
    ///////////MEANSURE WINDOW////////
    /////////////////////////////////
    {0x08,0xa4,1},
    {0x09,0xf0,1},

    //////////////////////////////////
    /////////// AEC   ////////////////
    //////////////////////////////////
    {0xfe,0x01,1},

    {0x10,0x08,1},

    {0x11,0x11,1},
    {0x12,0x14,1},
    {0x13,0x40,1},
    {0x16,0xd8,1},
    {0x17,0x98,1},
    {0x21,0xc0,1},
    {0x22,0x40,1},

    {0x29,0x00,1},
    {0x2a,0x96,1},
    {0x2b,0x02,1},
    {0x2c,0x58,1},
    {0x2d,0x03,1},
    {0x2e,0x84,1},
    {0x2f,0x07,1},
    {0x30,0x08,1},
    {0x31,0x0e,1},
    {0x32,0xa6,1},
    {0x33,0x20,1},

    //////////////////////////////
    //////////////AWB////////////
    ///////////////////////////////
    {0x06,0x10,1},
    {0x08,0xa0,1},

    {0x50,0xfe,1},
    {0x51,0x05,1},
    {0x52,0x28,1},
    {0x53,0x08,1},
    {0x54,0x10,1},
    {0x55,0x20,1},
    {0x56,0x10,1},
    {0x57,0x20,1},
    {0x58,0xf8,1},
    {0x59,0x10,1},
    {0x5a,0x16,1},
    {0x5b,0xf0,1},
    {0x5e,0xe8,1},
    {0x5f,0x20,1},
    {0x60,0x20,1},
    {0x61,0xe0,1},

    {0x62,0x03,1},
    {0x63,0x30,1},
    {0x64,0xc0,1},
    {0x65,0xd0,1},
    {0x66,0x20,1},
    {0x67,0x00,1},

    {0x6d,0x80,1},
    {0x6e,0x08,1},
    {0x6f,0x08,1},
    {0x70,0x10,1},

    {0x72,0x2e,1},
    {0x73,0x62,1},
    {0x74,0x03,1},

    {0x75,0x48,1},
    {0x76,0x40,1},
    {0x77,0xc2,1},
    {0x78,0xa5,1},

    {0x79,0x18,1},
    {0x7a,0x40,1},
    {0x7b,0xb0,1},
    {0x7c,0xf5,1},

    {0x81,0x80,1},
    {0x82,0x60,1},
    {0x83,0x80,1},

    {0x8a,0xf8,1},
    {0x8b,0xf4,1},
    {0x8c,0x0a,1},
    {0x8d,0x00,1},
    {0x8e,0x00,1},
    {0x8f,0x00,1},
    {0x90,0x12,1},

    {0xfe,0x00,1},
    /////////////////////////////////////////
    /////////// SPI reciver//////////////////
    /////////////////////////////////////////
    //{0xad, 0x00,1},

    /////////////////////////////
    /////////////LSC/////////////
    /////////////////////////////
    {0xfe, 0x01,1},
    {0xa0, 0x00,1},
    {0xa1, 0x3c,1},
    {0xa2, 0x50,1},
    {0xa3, 0x00,1},
    {0xa8, 0x09,1},
    {0xa9, 0x04,1},
    {0xaa, 0x00,1},
    {0xab, 0x0c,1},
    {0xac, 0x02,1},
    {0xad, 0x00,1},
    {0xae, 0x15,1},
    {0xaf, 0x05,1},
    {0xb0, 0x00,1},
    {0xb1, 0x0f,1},
    {0xb2, 0x06,1},
    {0xb3, 0x00,1},
    {0xb4, 0x36,1},
    {0xb5, 0x2a,1},
    {0xb6, 0x25,1},
    {0xba, 0x36,1},
    {0xbb, 0x25,1},
    {0xbc, 0x22,1},
    {0xc0, 0x1e,1},
    {0xc1, 0x18,1},
    {0xc2, 0x17,1},
    {0xc6, 0x1c,1},
    {0xc7, 0x18,1},
    {0xc8, 0x17,1},
    {0xb7, 0x00,1},
    {0xb8, 0x00,1},
    {0xb9, 0x00,1},
    {0xbd, 0x00,1},
    {0xbe, 0x00,1},
    {0xbf, 0x00,1},
    {0xc3, 0x00,1},
    {0xc4, 0x00,1},
    {0xc5, 0x00,1},
    {0xc9, 0x00,1},
    {0xca, 0x00,1},
    {0xcb, 0x00,1},
    {0xa4, 0x00,1},
    {0xa5, 0x00,1},
    {0xa6, 0x00,1},
    {0xa7, 0x00,1},

    {0xfe, 0x00,1},
    {0x50, 0x01,1},  //crop
    {0x44, 0xa2,1},
    //{0x24, 0x16,1},
    //subsample 1/3
    {0x59,0x44,1},
    {0x5a,0x03,1},
    {0x5b,0x00,1},
    {0x5c,0x00,1},
    {0x5d,0x00,1},
    {0x5e,0x00,1},
    {0x5f,0x00,1},
    {0x60,0x00,1},
    {0x61,0x00,1},
    {0x62,0x00,1},

    //crop 160x120
    {0x50,0x01,1},
    {0x51,0x00,1},
    {0x52,0x00,1},
    {0x53,0x00,1},
    {0x54,0x00,1},
    {0x55,0x00,1},
    {0x56,0x78,1},  //Height
    {0x57,0x00,1},
    {0x58,0xa0,1},  //Width

};

PRIVATE const CAM_REG_T RG_VidFormatVga[] =
{
};

PRIVATE const CAM_REG_T RG_VidFormatQvga[] =
{
};

PRIVATE const CAM_REG_T RG_VidFormatQqvga[] =
{
};

typedef struct
{
    // Camera information structure
    char                desc[40];

    UINT8               snrtype;            //sensor type{RGB or YUV)
    UINT8               pclk;               //use PCLK of sensor
    UINT8               clkcfg;             //[0]: VSync delay enable; [1]: Fifo VSync delay enable; [2]: Use PCLK Negtive Edge.
    HAL_I2C_BPS_T       i2crate;            //I2C rate : KHz
    UINT8               i2caddress;         //I2C address
    UINT8               i2cispaddress;      //ISP I2C address
    UINT8               pwrcfg;             //sensor power initial configure{SIF REG801 BIT[0]~BIT[2])
    BOOL                rstactiveh;         //sensor reset active hi/low polarity {TRUE = active hi)
    BOOL                snrrst;             //Reset sensor enable

    CAM_MODE_T          cammode;


    BOOL                capturevideo;
    BOOL                captureframe;
    UINT8               numactivebuffers;
    UINT8               currentbuf;

    UINT8               brightness;         //brightness
    UINT8               contrast;           //contrast

    CAM_FORMAT_T        format;
    UINT32              npixels;
    CAM_IMAGE_T         vidbuffer;

    CAM_REG_GROUP_T     standby;            //sensor standby register
    CAM_REG_GROUP_T     Initpoweron;        //SENSOR ISP initial configure

    CAM_REG_GROUP_T     sifpwronseq;        //Sif config sequence{Reg.800 bit0~2) when sensor power on
    CAM_REG_GROUP_T     sifstdbyseq;        //Sif config sequence{Reg.800 bit0~2) when sensor standby
    CAM_REG_GROUP_T     dsif;               //SIF initial configure
    //    TSnrSizeCfgGroup    snrSizeCfg;         //sensor size configure information

    // This 'callback' mechanism is not necessary because the encapsulation is taken
    // care of by the environment
    //    PSensorSetReg       snrSetRegCall;      //set reg callback
    //    PSensorGetReg       snrGetRegCall;
    //    PSnrIdChk           snrIdChkCall;
    //    PSnrMirrorFlip      snrMirrorFlipCall;
    //    PSnrContrast        snrContrastCall;
    //    PSnrBrightness      snrBrightnessCall;
    //    PSnrMode            snrModeCall;
    //    PSnrGetEt           snrGetEt;
    //    PSnrSetEt           snrSetEt;
    //    TFlashParm          flashparm;
    CAM_IRQ_HANDLER_T   camirqhandler;
} CAM_INFO_T;




PRIVATE volatile CAM_INFO_T gSensorInfo =
{
    "BG0313",      // char desc[40];

    0,                      // UINT8 snrtype; {rgb)
    1,                      // UINT8 pclk; use or don't use PCLK of sensor???
    0,                      // UINT8 clkcfg; ???
    HAL_I2C_BPS_100K,       // UINT16 i2crate;
    0x33,                   // UINT8 i2caddress; this is the _REAL_ slave address.
    //  The value written in phase 1 of a write cycle will be 0x42
    //  while the value just before the read will be 0x43
    0x33,                   // UINT8 i2cispaddress;
    0x02,                   // UINT8 pwrcfg;???
    TRUE,                   // BOOL rstactiveh;  // active high
    FALSE,                  // BOOL snrrst;

    CAM_MODE_IDLE,          // cammode

    FALSE,                  // Capture video mode
    FALSE,                  // Capturing single frame
    0,                      // Number of active buffers reserved by the upper layer
    0,                      // current frame buffer

    3,                      // UINT8 brightness;
    4,                      // UINT8 contrast;
    CAM_FORMAT_RGB565,      // Format
    CAM_NPIX_VGA,           // npixels{VGA, QVGA, QQVGA...)
    NULL,                   // Video Buffer.  First frame buffer for video or image buffer

    {0, NULL},              // CAM_REG_GROUP_T standby;
    // Should start with QQVGA, but for testing, start with VGA
    //    {sizeof(RG_InitPowerOnQqvga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnQqvga}, // CAM_REG_GROUP_T Initpoweron;
    {sizeof(RG_InitPowerOnVga) / sizeof(CAM_REG_T), (CAM_REG_T*)&RG_InitPowerOnVga}, // CAM_REG_GROUP_T Initpoweron;

    {0, NULL},              // CAM_REG_GROUP_T sifpwronseq;
    {0, NULL},              // CAM_REG_GROUP_T sifstdbyseq;
    {0, NULL},              // CAM_REG_GROUP_T dsif; initial value
    NULL                    // IRQ Callback
};

// ############
// Private
// ############

// These are the commands specific to the SCCB
#define PHASE3_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE3_WR_PH2   0x1000      // Write            Slave Register Address
#define PHASE3_WR_PH3   0x1100      // Stop & Write     Slave Register Data

#define PHASE2_WR_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_WR_PH2   0x1100      // Stop & Write     Slave Register Address {to read)

#define PHASE2_RD_PH1   0x11000     // Start & Write    Slave ID
#define PHASE2_RD_PH2   0x111       // Stop & Read & NACK   Slave Register Read Data

PRIVATE VOID camerap_WriteOneReg( UINT8 Addr, UINT8 Data);
PRIVATE VOID camerap_Delay(UINT16 Wait_mS);
PRIVATE VOID camerap_WriteReg(CAM_REG_T RegWrite);
PRIVATE UINT8 camerap_ReadReg(UINT8 Addr);
PRIVATE VOID camerap_SendRgSeq(const CAM_REG_T *RegList, UINT16 Len);
PRIVATE VOID camerap_InteruptHandler(HAL_CAMERA_IRQ_CAUSE_T cause);
PRIVATE UINT8 camerap_GetId(VOID);

